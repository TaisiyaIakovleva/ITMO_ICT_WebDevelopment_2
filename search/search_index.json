{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"#k3343","title":"\u042f\u043a\u043e\u0432\u043b\u0435\u0432\u0430 \u0422\u0430\u0438\u0441\u0438\u044f, K3343","text":""},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml\ndocs/\n    index.md\n    lab1.md      \n    endpoints.md\n</code></pre>"},{"location":"#github","title":"Github","text":"<ul> <li>Github \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439</li> <li>Lab1</li> <li>Prac1</li> <li>Prac2</li> <li>Prac3</li> </ul>"},{"location":"lab1/endpoints/","title":"endpoints","text":""},{"location":"lab1/endpoints/#users","title":"users","text":"<ul> <li>\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f</li> </ul> <pre><code>@router.post(\"/register\", response_model=UserRead)\ndef register(user: UserCreate, session: Session = Depends(get_session)):\n    db_user = session.exec(select(User).where(User.email == user.email)).first()\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n\n    hashed_password = get_password_hash(user.password)\n    new_user = User(email=user.email, username=user.username, hashed_password=hashed_password)\n    session.add(new_user)\n    session.commit()\n    session.refresh(new_user)\n    return new_user\n</code></pre> <ul> <li>\u0432\u0445\u043e\u0434</li> </ul> <pre><code>@router.post(\"/login\")\ndef login(user: UserCreate, session: Session = Depends(get_session)):\n    db_user = session.exec(select(User).where(User.email == user.email)).first()\n\n    if not db_user or not verify_password(user.password, db_user.hashed_password):\n        raise HTTPException(status_code=400, detail=\"Incorrect email or password\")\n\n    access_token = create_jwt_token(data={\"sub\": str(db_user.id)}, expires_delta=timedelta(minutes=30))\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n</code></pre> <ul> <li>\u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f</li> </ul> <pre><code>@router.post(\"/change-password\", dependencies=[Depends(bearer_scheme)])\ndef change_password(\n    request: ChangePassword,\n    session: Session = Depends(get_session),\n    current_user: User = Depends(get_current_user)\n):\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u043f\u0430\u0440\u043e\u043b\u044f\n    if not verify_password(request.old_password, current_user.hashed_password):\n        raise HTTPException(status_code=400, detail=\"Incorrect old password\")\n\n    # c\u043c\u0435\u043d\u0430 \u043d\u0430 \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c\n    current_user.hashed_password = get_password_hash(request.new_password)\n    session.add(current_user)\n    session.commit()\n\n    return {\"message\": \"Password changed successfully\"}\n</code></pre> <ul> <li>\u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439</li> </ul> <pre><code>@router.get(\"/\")\ndef users_list(session=Depends(get_session)) -&gt; List[User]:\n    return session.exec(select(User)).all()\n</code></pre> <ul> <li>\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> </ul> <pre><code>@router.patch(\"/{user_id}\", response_model=User)\ndef update_user(user_id: int, user: UserDefault, session: Session = Depends(get_session)):\n    db_user = session.get(User, user_id)\n    user_data = user.model_dump(exclude_unset=True)\n    user_data.pop(\"hashed_password\", None)\n    for key, value in user_data.items():\n        setattr(db_user, key, value)\n    session.add(db_user)\n    session.commit()\n    session.refresh(db_user)\n    return db_user\n</code></pre> <ul> <li>\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> </ul> <pre><code>@router.delete(\"/{user_id}\")\ndef delete_user(user_id: int, session: Session = Depends(get_session)):\n    user = session.get(User, user_id)\n    accounts = session.exec(select(Account).where(Account.user_id == user_id)).all()\n    for account in accounts:\n        transactions = session.exec(select(Transaction).where(Transaction.account_id == account.id)).all()\n        for transaction in transactions:\n            session.delete(transaction)\n        transfers = session.exec(select(Transfer).where(Transfer.from_account_id == account.id)).all()\n        for transfer in transfers:\n            session.delete(transfer)\n\n\n    for account in accounts:\n        session.delete(account)\n    budgets = session.exec(select(Budget).where(Budget.user_id == user_id)).all()\n    for budget in budgets:\n        session.delete(budget)\n\n    session.delete(user)\n    session.commit()\n    return {\"ok\": True}\n</code></pre> <ul> <li>\u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u0445 \u0441\u0447\u0435\u0442\u0430\u043c\u0438 (\u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441)</li> </ul> <pre><code>@router.get(\"/users-with-accounts\")\ndef get_users_with_accounts(session: Session = Depends(get_session)):\n    users = session.exec(select(User)).all()\n    result = []\n\n    for user in users:\n        session.refresh(user, attribute_names=[\"accounts\"])\n        result.append({\n            \"id\": user.id,\n            \"username\": user.username,\n            \"email\": user.email,\n            \"accounts\": [\n                {\n                    \"id\": acc.id,\n                    \"name\": acc.name,\n                    \"balance\": acc.balance,\n                    \"is_goal\": acc.is_goal,\n                    \"target_amount\": acc.target_amount\n                }\n                for acc in user.accounts\n            ]\n        })\n\n    return result\n</code></pre>"},{"location":"lab1/endpoints/#accounts","title":"accounts","text":"<ul> <li>\u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0447\u0435\u0442\u043e\u0432</li> <li>\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430</li> <li>\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430</li> </ul>"},{"location":"lab1/endpoints/#budgets","title":"budgets","text":"<ul> <li>\u0441\u043f\u0438\u0441\u043e\u043a \u0431\u044e\u0434\u0436\u0435\u0442\u043e\u0432</li> <li>\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u044e\u0434\u0436\u0435\u0442 \u043d\u0430 \u043c\u0435\u0441\u044f\u0446</li> </ul>"},{"location":"lab1/endpoints/#transactions","title":"transactions","text":"<ul> <li>\u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439</li> <li>\u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f</li> </ul>"},{"location":"lab1/endpoints/#transfers","title":"transfers","text":"<ul> <li>\u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u0432</li> </ul> <pre><code>@router.get(\"/\", response_model=List[Transfer])\ndef list_transfers(session: Session = Depends(get_session)):\n    return session.exec(select(Transfer)).all()\n</code></pre> <ul> <li>\u043f\u0435\u0440\u0435\u0432\u043e\u0434</li> </ul> <pre><code>@router.post(\"/\", response_model=Transfer)\ndef create_transfer(transfer: TransferDefault, session: Session = Depends(get_session)):\n    if transfer.from_account_id == transfer.to_account_id:\n        raise HTTPException(status_code=400, detail=\"Cannot transfer to the same account\")\n\n    from_account = session.get(Account, transfer.from_account_id)\n    to_account = session.get(Account, transfer.to_account_id)\n\n    if not from_account or not to_account:\n        raise HTTPException(status_code=404, detail=\"Account not found\")\n\n    if from_account.balance &lt; transfer.amount:\n        raise HTTPException(status_code=400, detail=\"Insufficient funds in source account\")\n\n    from_account.balance -= transfer.amount\n    to_account.balance += transfer.amount\n\n    transfer = Transfer.model_validate(transfer)\n    session.add(transfer)\n    session.add(from_account)\n    session.add(to_account)\n    session.commit()\n    session.refresh(transfer)\n    return transfer\n</code></pre>"},{"location":"lab1/lab1/","title":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u043c\u0438","text":""},{"location":"lab1/lab1/#_2","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u043c\u0438. \u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e\u0445\u043e\u0434\u044b \u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u044b, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0431\u044e\u0434\u0436\u0435\u0442\u044b \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043e\u0442\u0447\u0435\u0442\u044b \u043e \u0441\u0432\u043e\u0438\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u0445. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430, \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0440\u0430\u0442 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0446\u0435\u043b\u0435\u0439 \u043d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435.</p>"},{"location":"lab1/lab1/#models","title":"Models","text":""},{"location":"lab1/lab1/#user-","title":"User - \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438","text":"<pre><code>class UserDefault(SQLModel):\n    username: str\n    email: EmailStr = Field(unique=True, index=True)\n    is_active: bool = True\n    hashed_password: str\n\nclass UserCreate(SQLModel):\n    username: str\n    email: EmailStr\n    password: str\n\nclass UserLogin(SQLModel):\n    username: str\n    password: str\n\nclass UserRead(SQLModel):\n    id: int\n    email: EmailStr\n    is_active: bool\n\nclass User(UserDefault, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    accounts: List[\"Account\"] = Relationship(back_populates=\"user\")\n    budgets: List[\"Budget\"] = Relationship(back_populates=\"user\")\n\nclass ChangePassword(BaseModel):\n    old_password: str\n    new_password: str\n</code></pre>"},{"location":"lab1/lab1/#account-","title":"Account - \u0441\u0447\u0435\u0442\u0430","text":"<pre><code>class AccountBase(SQLModel):\n    name: str\n    balance: float\n    is_goal: bool = False\n    target_amount: Optional[float] = None\n\n\nclass Account(AccountBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    user_id: int = Field(foreign_key=\"user.id\")\n    user: Optional[User] = Relationship(back_populates=\"accounts\")\n\n\nclass AccountDefault(SQLModel):\n    user_id: int\n    name: str\n    is_goal: bool = False\n    balance: float = 0.0  \n    target_amount: Optional[float] = None # \u0446\u0435\u043b\u044c (\u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 is_goal=True)\n</code></pre>"},{"location":"lab1/lab1/#transaction-","title":"Transaction - \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438","text":"<pre><code>class TransactionBase(SQLModel):\n    amount: float\n    description: str\n    date: datetime\n    category: CategoryType\n\n\nclass Transaction(TransactionBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    account_id: int = Field(foreign_key=\"account.id\")\n\n\nclass TransactionDefault(SQLModel):\n    account_id: int\n    category: CategoryType\n    amount: float\n    description: Optional[str]\n    date: datetime\n</code></pre>"},{"location":"lab1/lab1/#budget-","title":"Budget - \u0431\u044e\u0434\u0436\u0435\u0442\u044b","text":"<pre><code>class BudgetBase(SQLModel):\n    month: int\n    year: int\n    limit: float\n    category: CategoryType\n\n\nclass Budget(BudgetBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    user_id: int = Field(foreign_key=\"user.id\")\n    user: Optional[User] = Relationship(back_populates=\"budgets\")\n\n\nclass BudgetDefault(SQLModel):\n    user_id: int\n    category: CategoryType\n    month: int\n    year: int\n    limit: float\n\nclass BudgetStats(BaseModel):\n    id: int\n    user_id: int\n    category: CategoryType\n    month: int\n    year: int\n    limit: float\n    spent: float\n    remaining: float\n</code></pre>"},{"location":"lab1/lab1/#transfer-","title":"Transfer - \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u0432\u043e\u0438\u043c\u0438 \u0441\u0447\u0435\u0442\u0430\u043c\u0438","text":"<pre><code>class TransferBase(SQLModel):\n    amount: float\n    date: datetime\n\n\nclass Transfer(TransferBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    from_account_id: int = Field(foreign_key=\"account.id\")\n    to_account_id: int = Field(foreign_key=\"account.id\")\n\n\nclass TransferDefault(SQLModel):\n    from_account_id: int\n    to_account_id: int\n    amount: float\n    date: datetime\n</code></pre>"}]}